// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/0xJacky/Nginx-UI/model"
)

func newLLMMessages(db *gorm.DB, opts ...gen.DOOption) lLMMessages {
	_lLMMessages := lLMMessages{}

	_lLMMessages.lLMMessagesDo.UseDB(db, opts...)
	_lLMMessages.lLMMessagesDo.UseModel(&model.LLMMessages{})

	tableName := _lLMMessages.lLMMessagesDo.TableName()
	_lLMMessages.ALL = field.NewAsterisk(tableName)
	_lLMMessages.Name = field.NewString(tableName, "name")
	_lLMMessages.Content = field.NewField(tableName, "content")

	_lLMMessages.fillFieldMap()

	return _lLMMessages
}

type lLMMessages struct {
	lLMMessagesDo

	ALL     field.Asterisk
	Name    field.String
	Content field.Field

	fieldMap map[string]field.Expr
}

func (l lLMMessages) Table(newTableName string) *lLMMessages {
	l.lLMMessagesDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lLMMessages) As(alias string) *lLMMessages {
	l.lLMMessagesDo.DO = *(l.lLMMessagesDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lLMMessages) updateTableName(table string) *lLMMessages {
	l.ALL = field.NewAsterisk(table)
	l.Name = field.NewString(table, "name")
	l.Content = field.NewField(table, "content")

	l.fillFieldMap()

	return l
}

func (l *lLMMessages) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lLMMessages) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 2)
	l.fieldMap["name"] = l.Name
	l.fieldMap["content"] = l.Content
}

func (l lLMMessages) clone(db *gorm.DB) lLMMessages {
	l.lLMMessagesDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lLMMessages) replaceDB(db *gorm.DB) lLMMessages {
	l.lLMMessagesDo.ReplaceDB(db)
	return l
}

type lLMMessagesDo struct{ gen.DO }

// FirstByID Where("id=@id")
func (l lLMMessagesDo) FirstByID(id uint64) (result *model.LLMMessages, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("id=? ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// DeleteByID update @@table set deleted_at=strftime('%Y-%m-%d %H:%M:%S','now') where id=@id
func (l lLMMessagesDo) DeleteByID(id uint64) (err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("update llm_messages set deleted_at=strftime('%Y-%m-%d %H:%M:%S','now') where id=? ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Exec(generateSQL.String(), params...) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (l lLMMessagesDo) Debug() *lLMMessagesDo {
	return l.withDO(l.DO.Debug())
}

func (l lLMMessagesDo) WithContext(ctx context.Context) *lLMMessagesDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lLMMessagesDo) ReadDB() *lLMMessagesDo {
	return l.Clauses(dbresolver.Read)
}

func (l lLMMessagesDo) WriteDB() *lLMMessagesDo {
	return l.Clauses(dbresolver.Write)
}

func (l lLMMessagesDo) Session(config *gorm.Session) *lLMMessagesDo {
	return l.withDO(l.DO.Session(config))
}

func (l lLMMessagesDo) Clauses(conds ...clause.Expression) *lLMMessagesDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lLMMessagesDo) Returning(value interface{}, columns ...string) *lLMMessagesDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lLMMessagesDo) Not(conds ...gen.Condition) *lLMMessagesDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lLMMessagesDo) Or(conds ...gen.Condition) *lLMMessagesDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lLMMessagesDo) Select(conds ...field.Expr) *lLMMessagesDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lLMMessagesDo) Where(conds ...gen.Condition) *lLMMessagesDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lLMMessagesDo) Order(conds ...field.Expr) *lLMMessagesDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lLMMessagesDo) Distinct(cols ...field.Expr) *lLMMessagesDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lLMMessagesDo) Omit(cols ...field.Expr) *lLMMessagesDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lLMMessagesDo) Join(table schema.Tabler, on ...field.Expr) *lLMMessagesDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lLMMessagesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *lLMMessagesDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lLMMessagesDo) RightJoin(table schema.Tabler, on ...field.Expr) *lLMMessagesDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lLMMessagesDo) Group(cols ...field.Expr) *lLMMessagesDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lLMMessagesDo) Having(conds ...gen.Condition) *lLMMessagesDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lLMMessagesDo) Limit(limit int) *lLMMessagesDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lLMMessagesDo) Offset(offset int) *lLMMessagesDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lLMMessagesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *lLMMessagesDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lLMMessagesDo) Unscoped() *lLMMessagesDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lLMMessagesDo) Create(values ...*model.LLMMessages) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lLMMessagesDo) CreateInBatches(values []*model.LLMMessages, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lLMMessagesDo) Save(values ...*model.LLMMessages) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lLMMessagesDo) First() (*model.LLMMessages, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LLMMessages), nil
	}
}

func (l lLMMessagesDo) Take() (*model.LLMMessages, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LLMMessages), nil
	}
}

func (l lLMMessagesDo) Last() (*model.LLMMessages, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LLMMessages), nil
	}
}

func (l lLMMessagesDo) Find() ([]*model.LLMMessages, error) {
	result, err := l.DO.Find()
	return result.([]*model.LLMMessages), err
}

func (l lLMMessagesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LLMMessages, err error) {
	buf := make([]*model.LLMMessages, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lLMMessagesDo) FindInBatches(result *[]*model.LLMMessages, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lLMMessagesDo) Attrs(attrs ...field.AssignExpr) *lLMMessagesDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lLMMessagesDo) Assign(attrs ...field.AssignExpr) *lLMMessagesDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lLMMessagesDo) Joins(fields ...field.RelationField) *lLMMessagesDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lLMMessagesDo) Preload(fields ...field.RelationField) *lLMMessagesDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lLMMessagesDo) FirstOrInit() (*model.LLMMessages, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LLMMessages), nil
	}
}

func (l lLMMessagesDo) FirstOrCreate() (*model.LLMMessages, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LLMMessages), nil
	}
}

func (l lLMMessagesDo) FindByPage(offset int, limit int) (result []*model.LLMMessages, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lLMMessagesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lLMMessagesDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lLMMessagesDo) Delete(models ...*model.LLMMessages) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lLMMessagesDo) withDO(do gen.Dao) *lLMMessagesDo {
	l.DO = *do.(*gen.DO)
	return l
}
