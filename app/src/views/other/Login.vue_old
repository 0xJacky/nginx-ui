<script setup lang="ts">
import auth from '@/api/auth'
import install from '@/api/install'
import passkey from '@/api/passkey'
import ICP from '@/components/ICP/ICP.vue'
import SetLanguage from '@/components/SetLanguage/SetLanguage.vue'
import SwitchAppearance from '@/components/SwitchAppearance/SwitchAppearance.vue'
import Authorization from '@/components/TwoFA/Authorization.vue'
import gettext from '@/gettext'
import { useUserStore } from '@/pinia'
import { KeyOutlined, LockOutlined, UserOutlined } from '@ant-design/icons-vue'
import { startAuthentication } from '@simplewebauthn/browser'
import { Form, message } from 'ant-design-vue'

const thisYear = new Date().getFullYear()

const route = useRoute()
const router = useRouter()

install.get_lock().then(async (r: { lock: boolean }) => {
  if (!r.lock)
    await router.push('/install')
})

const loading = ref(false)
const enabled2FA = ref(false)
const refOTP = useTemplateRef('refOTP')
const passcode = ref('')
const recoveryCode = ref('')
const passkeyConfigStatus = ref(false)

const modelRef = reactive({
  username: '',
  password: '',
})

const rulesRef = reactive({
  username: [
    {
      required: true,
      message: () => $gettext('Please input your username!'),
    },
  ],
  password: [
    {
      required: true,
      message: () => $gettext('Please input your password!'),
    },
  ],
})

const { validate, validateInfos, clearValidate } = Form.useForm(modelRef, rulesRef)
const userStore = useUserStore()
const { login, passkeyLogin } = userStore
const { secureSessionId } = storeToRefs(userStore)

function onSubmit() {
  validate().then(async () => {
    loading.value = true

    await auth.login(modelRef.username, modelRef.password, passcode.value, recoveryCode.value).then(async r => {
      const next = (route.query?.next || '').toString() || '/'
      switch (r.code) {
        case 200:
          message.success($gettext('Login successful'), 1)
          login(r.token)
          await nextTick()
          secureSessionId.value = r.secure_session_id
          await router.push(next)
          break
        case 199:
          enabled2FA.value = true
          break
      }
    }).catch(e => {
      if (e.code === 4043) {
        refOTP.value?.clearInput()
      }
    })
    loading.value = false
  })
}

const user = useUserStore()

if (user.isLogin) {
  const next = (route.query?.next || '').toString() || '/dashboard'

  router.push(next)
}

watch(() => gettext.current, () => {
  clearValidate()
})

const has_casdoor = ref(false)
const casdoor_uri = ref('')

auth.get_casdoor_uri()
  .then(r => {
    if (r?.uri) {
      has_casdoor.value = true
      casdoor_uri.value = r.uri
    }
  })

function loginWithCasdoor() {
  window.location.href = casdoor_uri.value
}

if (route.query?.code !== undefined && route.query?.state !== undefined) {
  loading.value = true
  auth.casdoor_login(route.query?.code?.toString(), route.query?.state?.toString()).then(async () => {
    message.success($gettext('Login successful'), 1)

    const next = (route.query?.next || '').toString() || '/'

    await router.push(next)
  })
  loading.value = false
}

function handleOTPSubmit(code: string, recovery: string) {
  passcode.value = code
  recoveryCode.value = recovery

  nextTick(() => {
    onSubmit()
  })
}

passkey.get_config_status().then(r => {
  passkeyConfigStatus.value = r.status
})

const passkeyLoginLoading = ref(false)
async function handlePasskeyLogin() {
  passkeyLoginLoading.value = true

  const begin = await auth.begin_passkey_login()
  const asseResp = await startAuthentication({ optionsJSON: begin.options.publicKey })

  const r = await auth.finish_passkey_login({
    session_id: begin.session_id,
    options: asseResp,
  })

  if (r.token) {
    const next = (route.query?.next || '').toString() || '/'

    passkeyLogin(asseResp.rawId, r.token)
    secureSessionId.value = r.secure_session_id
    await router.push(next)
  }

  passkeyLoginLoading.value = false
}
</script>
<template>
  <ALayout>
    <ALayoutContent>
      <div class="login-container">
        <ACard class="login-card" :bordered="false">
          <div class="login-form">
            <div class="project-title">
              <h1>PrimeWaf</h1>
            </div>
            <AForm id="components-form-demo-normal-login">
              <template v-if="!enabled2FA">
                <AFormItem v-bind="validateInfos.username">
                  <AInput
                    v-model:value="modelRef.username"
                    :placeholder="$gettext('Username')"
                  >
                    <template #prefix>
                      <UserOutlined style="color: rgba(0, 0, 0, 0.25)" />
                    </template>
                  </AInput>
                </AFormItem>
                <AFormItem v-bind="validateInfos.password">
                  <AInputPassword
                    v-model:value="modelRef.password"
                    :placeholder="$gettext('Password')"
                  >
                    <template #prefix>
                      <LockOutlined style="color: rgba(0, 0, 0, 0.25)" />
                    </template>
                  </AInputPassword>
                </AFormItem>
                <AButton
                  v-if="has_casdoor"
                  block
                  html-type="submit"
                  :loading="loading"
                  class="mb-5"
                  @click="loginWithCasdoor"
                >
                  {{ $gettext('SSO Login') }}
                </AButton>
              </template>
              <div v-else>
                <Authorization
                  ref="refOTP"
                  :two-f-a-status="{
                    enabled: true,
                    otp_status: true,
                    passkey_status: false,
                  }"
                  @submit-o-t-p="handleOTPSubmit"
                />
              </div>

              <AFormItem v-if="!enabled2FA">
                <AButton
                  type="primary"
                  block
                  html-type="submit"
                  :loading="loading"
                  class="mb-2"
                  @click="onSubmit"
                >
                  {{ $gettext('Login') }}
                </AButton>

                <!-- <div
                  v-if="passkeyConfigStatus"
                  class="flex flex-col justify-center"
                >
                  <ADivider>
                    <div class="text-sm font-normal opacity-75">
                      {{ $gettext('Or') }}
                    </div>
                  </ADivider>

                  <AButton
                    :loading="passkeyLoginLoading"
                    @click="handlePasskeyLogin"
                  >
                    <KeyOutlined />
                    {{ $gettext('Sign in with a passkey') }}
                  </AButton>
                </div> -->
              </AFormItem>
            </AForm>
            <div class="footer">
              <p class="mb-4">
                Copyright Â© 2021 - {{ thisYear }} PrimeWaf
              </p>
              <ICP class="mb-4" />
              Language
              <SetLanguage class="inline" />
              <div class="flex justify-center mt-4">
                <SwitchAppearance />
              </div>
            </div>
          </div>
        </ACard>
      </div>
    </ALayoutContent>
  </ALayout>
</template>

<style lang="less" scoped>
.login-container {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);

  .login-card {
    max-width: 420px;
    width: 90%;
    border-radius: 15px;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
    backdrop-filter: blur(10px);
    background: rgba(255, 255, 255, 0.95);
    
    .login-form {
      .project-title {
        margin: 30px 0;
        
        h1 {
          font-size: 42px;
          font-weight: 300;
          text-align: center;
          background: linear-gradient(45deg, #2196F3, #00BCD4);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          letter-spacing: 1px;
        }
      }

      :deep(.ant-input-affix-wrapper) {
        border-radius: 8px;
        height: 45px;
      }

      :deep(.ant-btn) {
        height: 45px;
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.3s ease;
        
        &:hover {
          transform: translateY(-2px);
          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
      }

      .footer {
        padding: 20px;
        text-align: center;
        font-size: 14px;
        color: #666;
      }
    }
  }
}

.dark {
  .login-container {
    background: linear-gradient(135deg, #1a1a1a 0%, #2d3436 100%);
    
    .login-card {
      background: rgba(30, 30, 30, 0.95);
    }
  }
}
</style>
